SEND_HIGH_SPEED_INDEX equ $3f
READ_SECTOR	 equ $52
WRITE_SECTOR	 equ $57
GET_CHUNK	 equ $f8
GET_NEXT_CHUNK   equ $f9

MAX_CHUNK_LENGTH equ 512

irqens	equ	$10
status	equ	$30
chksum	equ	$31
cntr	equ	$32

ddevic	equ	$0300
dunit	equ	$0301
dcmnd	equ	$0302
dstats	equ	$0303
dbufa	equ	$0304
dtimlo	equ	$0306
dunuse	equ	$0307
dbyt	equ	$0308
daux1	equ	$030a
daux2	equ	$030b

iccmd	equ	$0342
icbufa	equ	$0344
icbufl	equ	$0348

audf1	equ	$d200
audc1	equ	$d201
audf2	equ	$d202
audc2	equ	$d203
audf3	equ	$d204
audc3	equ	$d205
audf4	equ	$d206
audc4	equ	$d207
audctl	equ	$d208
skstres	equ	$d20a
serin	equ	$d20d
serout	equ	$d20d
irqen	equ	$d20e
irqst	equ	$d20e
skctl	equ	$d20f
skstat	equ	$d20f

pbctl	equ	$d303

wvsync	equ	$d40a
nmien	equ	$d40e

jciomain equ	$e456
jsioint	equ	$e459

	opt	h-f+

	org	$0700
bflag	dta	0
brcnt	dta	3
bldadr	dta	a($0700)
biwtadr	dta	a($0000)
jxbcont	jmp	boot
sabyte	dta	1
drvbyt	dta	0
	dta	0
sasa	dta	a($0000)
dsflg	dta	0
dflink	dta	a($0000)
bldisp	dta	0
dfladr	dta	a($0000)

	;         012345678901234567890123456789123456789'
msg	dta	c'Loading '
    :32	dta	0
	dta	$9b
segsta	dta	a(0)
segend	dta	a(0)
chlen	dta	a(0)
hsidx	dta	10
fstblk	dta	a(0)

dummy_init
	rts

putline
	ldx	#$00
	sta	icbufa,x
	tya
	sta	icbufa+1,x
	lda	#$ff
	sta	icbufl,x
	lda	#$09
	sta	iccmd,x
	jmp	jciomain

boot
	; read bootloader sectors: 4..
	lda	#$31
	sta	ddevic
	lda	#$01
	sta	dunit
	lda	#$08
	sta	dtimlo
	lda	#<[$700+3*128]
	sta	dbufa
	lda	#>[$700+3*128]
	sta	dbufa+1
	lda	#128
	sta	dbyt
	lda	#0
	sta	dbyt+1
	lda	#4
	sta	daux1
	lda	#0
	sta	daux2
	lda	#READ_SECTOR
	sta	dcmnd
bootloop
	lda	#$40
	sta	dstats
	jsr	jsioint
	bmi	bootloop
	clc
	lda	dbufa
	adc	#128
	sta	dbufa
	lda	dbufa+1
	adc	#0
	sta	dbufa+1
	inc	daux1
	lda	daux1
	cmp	#9
	bne	bootloop

	; display message
	lda	#<msg
	ldy	#>msg
	jsr	putline

	; set SIO high speed
	lda	#$40
	sta	dstats
	lda	#<hsidx
	sta	dbufa
	lda	#>hsidx
	sta	dbufa+1
	lda	#1
	sta	dbyt
	lda	#0
	sta	dbyt+1
	lda	#SEND_HIGH_SPEED_INDEX
	sta	dcmnd
	jsr	jsioint

	; disable interrupts
	jsr	disable_interrupts
	; setup POKEY
	jsr	setup_pokey

	; reset run address
	lda	#0
	sta	$2e0
	sta	$2e1

segment_loop

	; read header
	lda	#GET_NEXT_CHUNK
read_header
	sta	dcmnd
	lda	#<segsta
	sta	dbufa
	lda	#>segsta
	sta	dbufa+1
	lda	#4
	sta	dbyt
	lda	#0
	sta	dbyt+1
	jsr	sio_read
	bpl	got_header
	lda	#GET_CHUNK
	jmp	read_header
got_header

	; segment_start = segment_end = $FFFF => run
	lda	#$ff
	cmp	segsta
	bne	no_run
	cmp	segsta+1
	bne	no_run
	cmp	segend
	bne	no_run
	cmp	segend+1
	bne	no_run
	lda	$2e0
	ora	$2e1
	bne	run
	lda	fstblk
	sta	$2e0
	lda	fstblk+1
	sta	$2e1
run
	; re-enable interrupts
	jsr	enable_interrupts
	; run
	jmp	($2e0)
no_run

	lda	#$ff
	cmp	segsta
	bne	got_segend
	cmp	segsta+1
	bne	got_segend
	; skip $FFFF in header
	lda	segend
	sta	segsta
	lda	segend+1
	sta	segsta+1
	; read segmend end
	lda	#GET_NEXT_CHUNK
read_segend
	sta	dcmnd
	lda	#<segend
	sta	dbufa
	lda	#>segend
	sta	dbufa+1
	lda	#2
	sta	dbyt
	lda	#0
	sta	dbyt+1
	jsr	sio_read
	bpl	got_segend
	lda	#GET_CHUNK
	jmp	read_segend
got_segend

	; save 1st block's start address
	lda	fstblk
	ora	fstblk+1
	bne	done_save_1st_block
	lda	segsta
	sta	fstblk
	lda	segsta+1
	sta	fstblk+1
done_save_1st_block

	; init address -> RTS
	lda	#<dummy_init
	sta	$02e2
	lda	#>dummy_init
	sta	$02e3

get_segment
	; segment_start > segment_end => init
	sec
	lda	segend
	sbc	segsta
	lda	segend+1
	sbc	segsta+1
	bcs	next_chunk
init	jsr	enable_interrupts
	jsr	jmp_init
	jsr	disable_interrupts
	jsr	setup_pokey
	jmp	segment_loop
jmp_init
	jmp	($02e2)
next_chunk

	; chunk_length := min(MAX_CHUNK_LENGTH, segment_end-segment_start+1)
	sec
	lda	segend
	sbc	segsta
	sta	chlen
	lda	segend+1
	sbc	segsta+1
	sta	chlen+1
	clc
	lda	#1
	adc	chlen
	sta	chlen
	lda	#0
	adc	chlen+1
	sta	chlen+1
	sec
	lda	#<MAX_CHUNK_LENGTH
	sbc	chlen
	lda	#>MAX_CHUNK_LENGTH
	sbc	chlen+1
	bcs	min_done
	lda	#<MAX_CHUNK_LENGTH
	sta	chlen
	lda	#>MAX_CHUNK_LENGTH
	sta	chlen+1
min_done

	; get next chunk
	lda	#GET_NEXT_CHUNK
data_loop
	sta	dcmnd
	lda	segsta
	sta	dbufa
	lda	segsta+1
	sta	dbufa+1
	lda	chlen
	sta	dbyt
	lda	chlen+1
	sta	dbyt+1
	jsr	sio_read
	bpl	got_segment
	lda	#GET_CHUNK
	jmp	data_loop
got_segment
	
	; segment_start := segment_start + chunk_length
	clc
	lda	chlen
	adc	segsta
	sta	segsta
	lda	chlen+1
	adc	segsta+1
	sta	segsta+1

	jmp	get_segment

disable_interrupts
	sei
	lda	#$00
	sta	nmien
	rts

enable_interrupts
	lda	irqens
	sta	irqen
	lda	#$40
	sta	nmien
	cli
	sta	wvsync
	rts

setup_pokey
	lda	#0
	sta	irqen
	lda	hsidx
	sta	audf3
	lda	#$00
	sta	audf4
	lda	#$28
	sta	audctl
	lda	#$a0
	sta	audc1
	sta	audc2
	sta	audc3
	lda	#$a8
	sta	audc4
	rts

sio_read
	lda	dbyt
	sta	daux1
	lda	dbyt+1
	sta	daux2
	lda	#$40
	sta	dstats
	;jsr	myjsioint
	;rts

myjsioint
	; clear interrupt flags
	lda	#$00
	sta	irqen
	; COMMAND := low
	lda	#$34
	sta	pbctl
	; delay
	ldx	#80
	dex
	bne	*-1
	; reset checksum
	lda	#0
	sta	chksum
	; setup POKEY: transmission
	lda	#$23
	sta	skctl
	; send command bytes + checksum
	lda	ddevic
	jsr	send_byte
	lda	dcmnd
	jsr	send_byte
	lda	daux1
	jsr	send_byte
	lda	daux2
	jsr	send_byte
	lda	chksum
	jsr	send_byte
	; COMMAND := high
	lda	#$3c
	sta	pbctl

	; setup POKEY: reception
	lda	#$13
	sta	skctl
	lda	#$20
	sta	irqen

	; reset status flag
	lda	#0
	sta	status

	; receive 'A'
	jsr	receive_byte
	bmi	end_myjsioint
	cmp	#$41
	beq	got_ack
	lda	#$80
	sta	status
	jmp	end_myjsioint
got_ack

	; receive 'C'
	jsr	receive_byte
	bmi	end_myjsioint
	cmp	#$43
	beq	got_complete
	lda	#$80
	sta	status
	jmp	end_myjsioint
got_complete

	; check if data read is necessary
	bit	dstats
	bvc	end_myjsioint

	; receive data
	lda	dbufa
	sta	store+1
	lda	dbufa+1
	sta	store+2
	clc
	lda	dbyt
	eor	#$ff
	adc	#1
	sta	cntr
	lda	dbyt+1
	eor	#$ff
	adc	#0
	sta	cntr+1
	lda	#0
	sta	chksum
receive_loop
	jsr	receive_byte
	bmi	end_myjsioint
store	sta	$1000
	clc
	adc	chksum
	adc	#0
	sta	chksum
	inc	store+1
	bne	next_byte
	inc	store+2
next_byte
	inc	cntr
	bne	receive_loop
	inc	cntr+1
	bne	receive_loop

	; receive checksum
	jsr	receive_byte
	bmi	end_myjsioint
	cmp	chksum
	beq	end_myjsioint
	lda	#$80
	sta	status
checksum_valid

end_myjsioint
	lda	#$03
	sta	skctl
	bit	status
	rts

send_byte
	sta	skstres ; ?
	sta	serout
	clc
	adc	chksum
	adc	#0
	sta	chksum
	ldx	#20
	dex
	bne	*-1
	lda	#$08
	sta	irqen
wait_send
	bit	irqst
	bne	wait_send
	lda	#$00
	sta	irqen
	ldx	#10
	dex
	bne	*-1
	rts

receive_byte
	ldx	#0		; timeout counter LO
	ldy	#0		; timeout counter HI
	lda	#$20		; IRQ bitmask
wait_receive
	inx
	bne	check_irq
	iny
	bne	check_irq
	jmp	receive_timeout
check_irq
	bit	irqst
	bne	wait_receive
	lda	#$00
	sta	irqen
	lda	#$20
	sta	irqen
	lda	serin
	bit	status
	rts
receive_timeout
	lda	#$80
	sta	status
	rts
